{{{preface
import robinlib.document as document
toc = document.TableOfContents("Table of Contents")
document.gopher.append(toc)
document.gopher.toc = toc

globaltoc = document.TableOfContents("Global Functions")
document.gopher.append(globaltoc)
toc.append(1, globaltoc)
}}}
{{{class
##############################################################
# Class Documentation for Python
# for class [[CLASS.name]]
#
#                                   generated by Griffin (tm)
##############################################################

c = document.TableOfContents("[[CLASS.name]]")
c.name = "[[CLASS.name]]"

gen = document.Document("General")
[[perspective.refillProperties(CLASS, "class-property")]]
document.gopher.append(gen)
c.append(0, gen)

basegroup = thisgroup = document.TableOfContents("Basics")
level = 0
group_stack = []
c.append(level, basegroup)
document.gopher.append(basegroup)

[[[context.refill("method","METHOD",meth) for meth in JythonIterator(__import__("backend").Utils.publicAccesibleMethods(CLASS,None).iterator())  if meth.group is None] ]]
[[[context.refill("friend","METHOD",friend) for friend in [con.getDeclared() for con in JythonIterator(CLASS.scope.friendIterator())] if friend.group is None] ]]
[[context.refill("group","GROUP",__import__("backend").Utils.accesibleGroups(CLASS,None,None).iterator())  ]]

document.gopher.append(c)
toc.append(1, c)
}}}
{{{function
######################################################################
# Function Documentation for Python
# for function [[FUNCTION.name]]
#
#                                   generated by Griffin (tm)
######################################################################

fn = document.Document("""[[perspective.reconstructPrototype(FUNCTION)]]""")
fn.name = """[[FUNCTION.name]]"""
this = fn
[[perspective.refillProperties(FUNCTION, "method-property")]]

document.gopher.append(fn)
globaltoc.append(1, fn)
}}}
{{{group
subgroup = document.TableOfContents("[[GROUP.name]]")
document.gopher.append(subgroup)
level = level + 1
c.append(level, subgroup)
group_stack.append(thisgroup)
thisgroup = subgroup
[[[context.refill("method","METHOD",meth) for meth in JythonIterator(__import__("backend").Utils.publicAccesibleMethods(CLASS,None).iterator())  if meth.group is not None and meth.group.getFullGroupHierarchyName() == GROUP.getFullGroupHierarchyName()] ]]
[[[context.refill("friend","METHOD",friend) for friend in [con.getDeclared() for con in JythonIterator(GROUP.scope.friendIterator())] ] ]]
[[context.refill("group","GROUP",__import__("backend").Utils.accesibleGroups(CLASS,GROUP,None).iterator())  ]]
thisgroup = group_stack.pop()
level = level - 1
}}}

{{{method

m = this = document.Document("""[[perspective.reconstructPrototype(METHOD)]]""")
m.name = """[[METHOD.name]]"""
[[perspective.refillProperties(METHOD, "method-property")]]
thisgroup.append(1, m)

document.gopher.append(m)
}}}
{{{friend

m = this = document.Document("""friend [[perspective.reconstructPrototype(METHOD)]]""")
m.name = """[[METHOD.name]]"""
[[perspective.refillProperties(METHOD, "method-property")]]
thisgroup.append(1, m)

document.gopher.append(m)
}}}
{{{class-property
gen.newSection("[[context.property(PROPERTY,"name")]]", ["""[[context.property(PROPERTY,"value")]] """])
}}}
{{{method-property
this.newSection("[[context.property(PROPERTY,"name")]]", ["""[[context.property(PROPERTY,"value")]] """])
}}}
