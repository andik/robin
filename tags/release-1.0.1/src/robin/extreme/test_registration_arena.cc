#include "enterprise.h"

struct RegData { const char *name; const char *type; RegData *i; void *sym; };

#define F (void*)&

int const_RoomType_TOURIST = (int)TOURIST;
int const_RoomType_LEISURE = (int)LEISURE;
int const_RoomType_SUITE = (int)SUITE;
int const_RoomType_EMBASSY = (int)EMBASSY;

RegData enum_RoomType[] = {
  { "TOURIST", 0, 0, F const_RoomType_TOURIST },
  { "LEISURE", 0, 0, F const_RoomType_LEISURE },
  { "SUITE", 0, 0, F const_RoomType_SUITE },
  { "EMBASSY", 0, 0, F const_RoomType_EMBASSY },
  { 0 }
};

RegData proto_buy[] = {
  { "hotel", "&Hotel", 0 },
  { 0, 0, 0 }
};

RegData proto_findHotel[] = {
  { "name", "&string", 0 },
};

RegData proto_Hotel__new1[] = {
  { "name", "&string", 0 },
  { "location", "&Location", 0 },
  { 0 }
};
RegData proto_Hotel__new2[] = {
  { "other", "&Hotel", 0 },
  { 0 }
};

RegData proto_Hotel__getName1[] = {
  { 0 }
};
RegData proto_Hotel__getLocation1[] = {
  { 0 }
};
RegData proto_Hotel__getRoomNo1[] = {
  { "room_number", "int", 0 },
  { 0 }
};

RegData proto_Hotel__rooming1[] = {   /* This is ugly, but I can't help it. */
  { "room", "&Room", 0 },             /* Besides, this is probably the way  */
  { 0 },                              /* autogenerated regs will look.      */
  { "level", "#RoomType", 0 },
  { "guests", "int", 0 },
  { 0 }
};


RegData proto_Room__new1[] = {
  { "level", "#RoomType", 0 },
  { 0 },
  { "level", "#RoomType", 0 },
  { "capacity", "int", 0 },
  { 0 },
  { "level", "#RoomType", 0 },
  { "capacity", "int", 0 },
  { "pool", "bool", 0 },
  { 0 }
};

RegData proto_string__new1[] = {
  { "cstr", "*char", 0 },
  { 0 }
};

RegData proto_Location__new1[] = {
  { "country", "&string", 0 },
  { "city", "&string", 0 },
  { 0 }
};

RegData interface_string[] = {
  { "*", "constructor", proto_string__new1, F string_new },
  { 0 }
};

RegData interface_Location[] = {
  { "*", "constructor", proto_Location__new1, F Location_new },
  { "print", "void", 0, F Location_print },
  { 0 }
};

RegData interface_Room[] = {
  { "*", "constructor", proto_Room__new1 + 0, F Room_new },
  { "*", "constructor", proto_Room__new1 + 2, F Room_newe },
  { "*", "constructor", proto_Room__new1 + 5, F Room_newex },
  { "getLevel", "#RoomType", 0, F Room_getLevel },
  { 0 }
};

RegData interface_Hotel[] = {
  { "*",           "constructor", proto_Hotel__new1, F Hotel_new },
  { "*",           "constructor", proto_Hotel__new2, F Hotel_copy },
  { "getName",     "*char",       proto_Hotel__getName1, F Hotel_getName },
  { "getLocation", "&Location",   proto_Hotel__getLocation1, 
                                  F Hotel_getLocation },
  { "getRoomNo",   "&Room",       proto_Hotel__getRoomNo1, F Hotel_getRoomNo },
  { "buildPool",   "void",        0, F Hotel_buildPool },
  { "buildRoom",   "void",        proto_Hotel__rooming1 + 0,F Hotel_buildRoom},
  { "checkin",     "void",        proto_Hotel__rooming1 + 2, F Hotel_checkin },
  { "availableRooms", "int",      0, F Hotel_availRooms },
  { "availableBeds",  "int",      0, F Hotel_availBeds },
  { 0 }
};

RegData entry[] = {
  { "RoomType", "enum", enum_RoomType },
  { "string", "class", interface_string },
  { "Location", "class", interface_Location },
  { "Hotel", "class", interface_Hotel },
  { "Room", "class", interface_Room },
  { "buy", "void", proto_buy, F global_buy },
  { "list", "void", 0, F global_list },
  { "findHotel", "&Hotel", proto_findHotel, F global_findHotel },
  { "flush", "void", 0, F global_flush },
  { 0, 0, 0 }
};
