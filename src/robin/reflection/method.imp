// -*- mode: C++; tab-width: 4; c-basic-offset: 4 -*-

/**
 * @file
 *
 * @par PACKAGE
 * Robin
 *
 * Regular method implementation.
 */


namespace Robin {



template < class CallableType >
RegularMethod<CallableType>::RegularMethod(const Handle<CallableType> &callable)
	: m_callable(callable)
{
}


template < class CallableType >
RegularMethod<CallableType>::~RegularMethod()
{
}

/**
 * Calls the underlying Callable object with the
 * instance object as the first argument.
 */
template < class CallableType >
scripting_element
RegularMethod<CallableType>::callUpon(scripting_element myself,
									  const ActualArgumentList& args,
                                      const KeywordArgumentMap& kwargs,
                                      scripting_element owner) const
{
	Handle<ActualArgumentList> wargs(new ActualArgumentList(args));

	wargs->insert(wargs->begin(), myself);  // prepend self
	// Invoke a regular call
	scripting_element result = m_callable->call(wargs, kwargs, owner);

	// Return the value generated by the call
	return result;
}

template < class CallableType >
Handle<WeightList> RegularMethod<CallableType>::weightUpon(scripting_element myself,
									const Handle<ActualArgumentList>& args,
									const KeywordArgumentMap &kwargs) const
{
	Handle<ActualArgumentList> wargs(new ActualArgumentList(*args));

	wargs->insert(wargs->begin(), myself);  // prepend self
	// Invoke a regular call
	Handle<WeightList> result = m_callable->weight(wargs, kwargs);
	// Return the value generated by the call
	return result;

}

} // end of namespace Robin
